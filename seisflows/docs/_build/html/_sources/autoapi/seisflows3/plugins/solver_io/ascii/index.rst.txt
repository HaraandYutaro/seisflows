:py:mod:`seisflows3.plugins.solver_io.ascii`
============================================

.. py:module:: seisflows3.plugins.solver_io.ascii

.. autoapi-nested-parse::

   Functions to read and write ASCII model (.dat) files used by SPECFEM2D



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   seisflows3.plugins.solver_io.ascii.read_slice
   seisflows3.plugins.solver_io.ascii.write_slice
   seisflows3.plugins.solver_io.ascii.copy_slice
   seisflows3.plugins.solver_io.ascii._get_filename
   seisflows3.plugins.solver_io.ascii._get_available_parameters
   seisflows3.plugins.solver_io.ascii._write



.. py:function:: read_slice(path, parameters, iproc)

   Reads SPECFEM model slice(s) based on .dat ASCII files

   :type path: str
   :param path: path to the database files
   :type parameters: str
   :param parameters: parameters to read, e.g. 'vs', 'vp'
   :type iproc: int
   :param iproc: processor/slice number to read
   :rtype: list of np.array
   :return: list of arrays corresponding to model parameters in given order


.. py:function:: write_slice(data, path, parameters, iproc)

   Writes SPECFEM model slice

   !!! This won't work because we need access to the spatial components that
   !!! are only the model

   :type data: seisflows.Container
   :param data: data to be written to a slice
   :type path: str
   :param path: path to the database files
   :type parameters: str
   :param parameters: parameters to write, e.g. 'vs', 'vp'
   :type iproc: int
   :param iproc: processor/slice number to write


.. py:function:: copy_slice(src, dst, iproc, parameter)

   Copies SPECFEM model slice

   :type src: str
   :param src: source location to copy slice from
   :type dst: str
   :param dst: destination location to copy slice to
   :type parameter: str
   :param parameter: parameters to copy, e.g. 'vs', 'vp'
   :type iproc: int
   :param iproc: processor/slice number to copy


.. py:function:: _get_filename(path, iproc)

   ASCII .dat files list the available parameters in the fileid, meaning
   there is no standard format for retrieving files. Use glob to search for
   the file based on file extension.

   :type path: str
   :param path: path to the database files
   :type iproc: int
   :param iproc: processor/slice number to read
   :rtype: str
   :return: filename of the model


.. py:function:: _get_available_parameters(filename)

   The available parameters are listed in the file name. Split off the 
   uncessary text and return the listend parameters.

   :type filename: str
   :param filename: filename to check parameters from
   :rtype: list
   :return: list of parameters from the file id


.. py:function:: _write(v, filename)

   Writes Fortran style binary files
   Data are written as single precision floating point numbers



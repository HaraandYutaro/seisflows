:py:mod:`seisflows3.workflow.inversion`
=======================================

.. py:module:: seisflows3.workflow.inversion

.. autoapi-nested-parse::

   This is the base class seisflows.workflow.Inversion

   This is a main Seisflows class, it controls the main workflow.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   seisflows3.workflow.inversion.Inversion




Attributes
~~~~~~~~~~

.. autoapisummary::

   seisflows3.workflow.inversion.PAR
   seisflows3.workflow.inversion.PATH
   seisflows3.workflow.inversion.system
   seisflows3.workflow.inversion.solver
   seisflows3.workflow.inversion.optimize
   seisflows3.workflow.inversion.preprocess
   seisflows3.workflow.inversion.postprocess


.. py:data:: PAR
   

   

.. py:data:: PATH
   

   

.. py:data:: system
   

   

.. py:data:: solver
   

   

.. py:data:: optimize
   

   

.. py:data:: preprocess
   

   

.. py:data:: postprocess
   

   

.. py:class:: Inversion

   Bases: :py:obj:`custom_import`\ (\ :py:obj:`'workflow'`\ , :py:obj:`'base'`\ )

   Waveform inversion base class

   Peforms iterative nonlinear inversion and provides a base class on top
   of which specialized strategies can be implemented.

   To allow customization, the inversion workflow is divided into generic
   methods such as "initialize", "finalize", "evaluate_function",
   "evaluate_gradient", which can be easily overloaded.

   Calls to forward and adjoint solvers are abstracted through the "solver"
   interface so that various forward modeling packages canf be used
   interchangeably.

   Commands for running in serial or parallel on a workstation or cluster
   are abstracted through the "system" interface.

   .. py:attribute:: logger
      

      

   .. py:method:: required(self)
      :property:

      A hard definition of paths and parameters required by this class,
      alongside their necessity for the class and their string explanations.


   .. py:method:: check(self, validate=True)

      Checks parameters and paths


   .. py:method:: main(self, return_flow=False)

      This function controls the main SeisFlows3 workflow, and is submitted
      to system by the call `seisflows submit` or `seisflows resume`. It
      proceeds to evaluate a list of functions in order until a User defined
      stop criteria is met.

      :type return_flow: bool
      :param return_flow: for CLI tool, simply returns the flow function
          rather than running the workflow. Used for print statements etc.


   .. py:method:: setup(self)

      Lays groundwork for inversion by running setup() functions for the 
      involved sub-modules, generating True model synthetic data if necessary,
      and generating the pre-requisite database files.

      .. note::
          This function should only be run one time, at the start of iter 1


   .. py:method:: initialize(self)

      Generates synthetics via a forward simulation, calculates misfits
      for the forward simulation. Writes misfit for use in optimization.


   .. py:method:: compute_direction(self)

      Computes search direction


   .. py:method:: line_search(self)

      Conducts line search in given search direction

      Status codes:
          status > 0  : finished
          status == 0 : not finished
          status < 0  : failed


   .. py:method:: evaluate_function(self, path, suffix)

      Performs forward simulation, and evaluates the objective function

      :type path: str
      :param path: path in the scratch directory to use for I/O
      :type suffix: str
      :param suffix: suffix to use for I/O


   .. py:method:: evaluate_gradient(self, path=None)

      Performs adjoint simulation to retrieve the gradient of the objective 


   .. py:method:: finalize(self)

      Saves results from current model update iteration and increment the
      iteration number to set up for the next iteration. Finalization is
      expected to the be LAST function in workflow.main()'s  flow list.


   .. py:method:: clean(self)

      Cleans directories in which function and gradient evaluations were
      carried out


   .. py:method:: checkpoint(self)

      Writes information to disk so workflow can be resumed following a break


   .. py:method:: write_model(self, path, tag)

      Writes model in format expected by solver

      :type path: str
      :param path: path to write the model to
      :type src: str
      :param src: name of the model to be saved, usually tagged as 'm' with
          a suffix depending on where in the inversion we are. e.g., 'm_try'.
          Expected that these tags are defined in OPTIMIZE module


   .. py:method:: write_gradient(self)

      Writes gradient in format expected by non-linear optimization library.
      Calls the postprocess module, which will smooth/precondition gradient.


   .. py:method:: write_misfit(self, path, tag)

      Writes misfit in format expected by nonlinear optimization library.
      Collects all misfit values within the given residuals directory and sums
      them in a manner chosen by the preprocess class.

      :type path: str
      :param path: path to write the misfit to
      :type tag: str
      :param tag: name of the model to be saved, usually tagged as 'f' with
          a suffix depending on where in the inversion we are. e.g., 'f_try'.
          Expected that these tags are defined in OPTIMIZE module


   .. py:method:: save_gradient(self)

      Save the gradient vector. Allows saving numpy array or standard
      Fortran .bin files

      Saving as a vector saves on file count, but requires numpy and seisflows
      functions to read


   .. py:method:: save_model(self)

      Save the model vector. Allows saving numpy array or standard
      Fortran .bin files

      Saving as a vector saves on file count, but requires numpy and seisflows
      functions to read


   .. py:method:: save_kernels(self)

      Save the kernel vector as a Fortran binary file on disk


   .. py:method:: save_traces(self)

      Save the waveform traces to disk.

      !!! This doesn't work? Traces are not saved to PATH.GRAD so src does
      !!! not exist


   .. py:method:: save_residuals(self)

      Save the residuals to disk




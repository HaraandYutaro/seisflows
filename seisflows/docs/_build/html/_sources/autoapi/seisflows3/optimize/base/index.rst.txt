:py:mod:`seisflows3.optimize.base`
==================================

.. py:module:: seisflows3.optimize.base

.. autoapi-nested-parse::

   The Optimization library contains classes and methods used to solve nonlinear
   optimization problems, i.e., misfit minimization. Various subclasses implement
   different optimization algorithms.

   .. note::
       By default the base class implements a steepest descent optimization



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   seisflows3.optimize.base.Base




Attributes
~~~~~~~~~~

.. autoapisummary::

   seisflows3.optimize.base.PAR
   seisflows3.optimize.base.PATH
   seisflows3.optimize.base.solver


.. py:data:: PAR
   

   

.. py:data:: PATH
   

   

.. py:data:: solver
   

   

.. py:class:: Base

   Nonlinear optimization abstract base class.

   This base class provides a steepest descent optimization algorithm.

   Nonlinear conjugate, quasi-Newton and Newton methods can be implemented on
   top of this base class.

   .. note::
       To reduce memory overhead, vectors are read from disk rather than passed
       from calling routines. For example, at the beginning of
       compute_direction the current gradient is  read from  'g_new' and the
       resulting search direction is written to 'p_new'. As the inversion
       progresses, other information is stored as well.

   .. note::
       The default numerical parameters defined below should work well for a
       range of applications without manual tuning. If the nonlinear
       optimization procedure stagnates, it may be due to issues involving
       data quality or the choice of data misfit, data processing, or
       regularization parameters.  Problems in any of these areas usually
       manifest themselves through stagnation of the nonlinear optimization
       algorithm.


   .. py:attribute:: logger
      

      

   .. py:method:: required(self)
      :property:

      A hard definition of paths and parameters required by this class,
      alongside their necessity for the class and their string explanations.


   .. py:method:: check(self, validate=True)

      Checks parameters, paths, and dependencies


   .. py:method:: setup(self)

      Sets up nonlinear optimization machinery


   .. py:method:: eval_str(self)
      :property:

      Print out the evaluation string, which states what iteration and line
      search step count we are at. Useful for log statements

      For example, an inversion at iteration 1 and step count 2 will return
      'i01s02'


   .. py:method:: compute_direction(self)

      Computes a steepest descent search direction (inverse gradient)
      with an optional user-defined preconditioner.

      .. note::
          Other optimization algorithms must overload this method


   .. py:method:: initialize_search(self)

      Initialize the plugin line search machinery. Should only be run at
      the beginning of line search, by the main workflow module.


   .. py:method:: update_search(self)

      Updates line search status and step length and checks if the line search
      has been completed.

      Available status codes from line_search.update():
          status == 1  : finished
          status == 0 : not finished
          status == -1  : failed


   .. py:method:: finalize_search(self)

      Prepares algorithm machinery and scratch directory for next model update

      Removes old model/search parameters, moves current parameters to old,
      sets up new current parameters and writes statistic outputs


   .. py:method:: retry_status(self)

      After a failed line search, this determines if restart is worthwhile
      by checking, in effect, if the search direction was the same as gradient
      direction


   .. py:method:: restart(self)

      Restarts nonlinear optimization algorithm for any schema that is NOT
      steepest descent (default base class).

      Keeps current position in model space, but discards history of
      nonlinear optimization algorithm in an attempt to recover from
      numerical stagnation.


   .. py:method:: write_stats(self, log, value=None, format='18.6E')

      Simplified write function to append values to text files in the
      STATSDIR. Used because stats line search information can be overwritten
      by subsequent iterations so we need to append values to text files
      if they should be retained.

      Log files will look something like:

      ITER  FACTOR
      ====  ======
         1     0.0

      :type log: str
      :param log: name of the file to write to. Will append .txt to it
      :type value: float
      :param value: value to write to file
      :type format: str
      :param format: string formatter for value


   .. py:method:: check_model(self, m, tag)

      Check to ensure that the model parameters fall within the guidelines
      of the solver. Print off min/max model parameters for the User.

      :type m: np.array
      :param m: model to check parameters of
      :type tag: str
      :param tag: tag of the model to be used for more specific error msgs


   .. py:method:: load(filename)
      :staticmethod:

      Convenience function to reads vectors from disk as Numpy files,
      reads directly from PATH.OPTIMIZE. Works around Numpy's behavior of
      appending '.npy' to files that it saves.

      :type filename: str
      :param filename: filename to read from
      :rtype: np.array
      :return: vector read from disk


   .. py:method:: save(filename, array)
      :staticmethod:

      Convenience function to write vectors to disk as numpy files.
      Reads directly from PATH.OPTIMIZE

      :type filename: str
      :param filename: filename to read from
      :type array: np.array
      :param array: array to be saved


   .. py:method:: loadtxt(filename)
      :staticmethod:

      Reads scalars from optimize directory on disk,
      accounts for savetxt() appending file extension

      :type filename: str
      :param filename: filename to read from
      :rtype: float
      :return: scalar read from disk


   .. py:method:: savetxt(filename, scalar)
      :staticmethod:

      Writes scalars to disk with a specific format, appends .txt to the
      filename to make it clear that these are text files.

      :type filename: str
      :param filename: filename to read from
      :type scalar: float
      :param scalar: value to write to disk




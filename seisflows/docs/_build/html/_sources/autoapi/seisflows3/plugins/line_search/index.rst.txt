:py:mod:`seisflows3.plugins.line_search`
========================================

.. py:module:: seisflows3.plugins.line_search


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   backtrack/index.rst
   base/index.rst
   bracket/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   seisflows3.plugins.line_search.Base
   seisflows3.plugins.line_search.Bracket
   seisflows3.plugins.line_search.Backtrack




.. py:class:: Base(step_count_max, step_len_max, log_file)

   Abstract base class for line search

   Variables Descriptions:
       x: list of step lenths from current line search
       f: correpsonding list of function values
       m: number of step lengths in current line search
       n: number of model updates in optimization problem
       gtg: dot product of gradient with itself
       gtp: dot product of gradient and search direction

   Status codes
       status > 0  : finished
       status == 0 : not finished
       status < 0  : failed

   .. py:attribute:: logger
      

      

   .. py:method:: initialize(self, iter, step_len, func_val, gtg, gtp)

      Initialize a new search from step count 0 and calculate the step
      direction and length

      :type iter: int
      :param iter: current iteration defined by OPTIMIZE.iter
      :type step_len: float
      :param step_len: initial step length determined by optimization
      :type func_val: float
      :param func_val: current evaluation of the objective function
      :type gtg: float
      :param gtg: dot product of the gradient with itself
      :type gtp: float
      :param gtp: dot product of gradient `g` with search direction `p`
      :rtype alpha: float
      :return alpha: the calculated trial step length
      :rtype status: int
      :return status: current status of the line search


   .. py:method:: update(self, iter, step_len, func_val)

      Update search history by appending internal attributes, writing the
      current list of step lengths and function evaluations, and calculating a
      new step length

      :type iter: int
      :param iter: current iteration defined by OPTIMIZE.iter
      :type step_len: float
      :param step_len: step length determined by optimization
      :type func_val: float
      :param func_val: current evaluation of the objective function
      :rtype alpha: float
      :return alpha: the calculated rial step length
      :rtype status: int
      :return status: current status of the line search


   .. py:method:: clear_history(self)

      Clears internal line search history


   .. py:method:: reset(self)

      If a line search fails mid-search, and the User wants to resume from 
      the line search function. Initialize will be called again. This function
      undos the progress made by the previous line search so that a new line
      search can be called without problem.

      output.optim needs to have its lines cleared manually


   .. py:method:: write_log(self, iter=None, step_len=None, func_val=None)

      Write the line search history into a formatted text file (self.log)
      that looks something like this:

          ITER     STEPLEN     MISFIT
      ========  ========== ==========
            1            0          1

      :type iter: int
      :param iter: the current iteration defined by OPTIMIZATION.iter.
      :type step_len: float
      :param step_len: Current step length of the line search, also known
          as 'alpha' in the optimization algorithm
      :type func_val: float
      :param func_val: the function evaluation, i.e., the misfit, associated
          with the given step length (alpha)


   .. py:method:: search_history(self, sort=True)

      A convenience function, collects information based on the current
      evaluation of the line search, needed to determine search status and 
      calculate step length. From the full collection of the search history,
      only returns values relevant to the current line search.

      :type sort: bool
      :param sort: sort the search history by step length
      :rtype x: np.array
      :return x: list of step lenths from current line search
      :rtype f: np.array
      :return f: correpsonding list of function values
      :rtype gtg: list
      :return gtg: dot product dot product of gradient with itself
      :rtype gtp: list
      :return gtp: dot product of gradient and search direction
      :rtype i: int
      :return i: step_count
      :rtype j: int
      :return j: number of iterations corresponding to 0 step length


   .. py:method:: calculate_step(self)
      :abstractmethod:

      Determines step length and search status

      !!! Must be implemented by subclass !!!



.. py:class:: Bracket(**kwargs)

   Bases: :py:obj:`seisflows3.plugins.line_search.base.Base`

   Implements bracketing line search, which attempts to find a step length
   corresponding to misfit reduction, and a misfit corresponding to misfit
   increase, so that the optimization procedure can scale the step length
   in future iterations.

   Variables Descriptions:
       x: list of step lenths from current line search
       f: correpsonding list of function values
       gtg: dot product of gradient with itself
       gtp: dot product of gradient and search direction

   Status codes
       status > 0  : finished
       status == 0 : not finished
       status < 0  : failed

   .. py:attribute:: logger
      

      

   .. py:method:: calculate_step(self)

      Determines step length (alpha) and search status (status)


   .. py:method:: _check_bracket(step_lens, func_vals)
      :staticmethod:

      Checks if minimum has been bracketed

      Looks at the minimum of the misfit values calculated through eval func
      to see if the misfit has been reduced w.r.t the initial misfit

      :type step_lens: numpy.array
      :param step_lens: an array of the step lengths taken during iteration
      :type func_vals: numpy.array
      :param func_vals: array of misfit values from eval func function
      :rtype: bool
      :return: status of function as a bool


   .. py:method:: _good_enough(self, step_lens, func_vals, thresh=np.log10(1.2))

      Checks if step length is reasonably close to quadratic estimate

      :type step_lens: np.array
      :param step_lens: an array of the step lengths taken during iteration
      :type func_vals: np.array
      :param func_vals: array of misfit values from eval func function
      :type thresh: numpy.float64
      :param thresh: threshold value for comparison against quadratic estimate
      :rtype: bool
      :return: status of function as a bool



.. py:class:: Backtrack(**kwargs)

   Bases: :py:obj:`seisflows3.plugins.line_search.bracket.Bracket`

   Overwrites seisflows.plugins.line_search.Bracket

   Implements backtracking linesearch. A backtracking line search is used
   for L-BFGS optimization, where a unit step length is attempted, if this
   does not satisfy the misfit reduction criteria, the step length is
   `backtracked` to a smaller value. If the backtracked value becomes too small
   the backtracking line search defaults to a Bracketing line search.

   Variables Descriptions:
       x: list of step lenths from current line search
       f: correpsonding list of function values
       m: number of step lengths in current line search
       n: number of model updates in optimization problem
       gtg: dot product of gradient with itself
       gtp: dot product of gradient and search direction

   Status codes
       status > 0  : finished
       status == 0 : not finished
       status < 0  : failed

   .. py:attribute:: logger
      

      

   .. py:method:: calculate_step(self)

      Determines step length and search status


   .. py:method:: _check_decrease(step_lens, func_vals, c=0.0001)
      :staticmethod:

      Checks for sufficient decrease by comparing the current functional value
      with the smallest functional value in the list.

      !!! What's with the unused value of 'c'?, also 'x' isn't used




:py:mod:`seisflows3.workflow.migration`
=======================================

.. py:module:: seisflows3.workflow.migration

.. autoapi-nested-parse::

   This is the base class seisflows.workflow.migration

   This is a main Seisflows class, it controls the main workflow.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   seisflows3.workflow.migration.Migration




Attributes
~~~~~~~~~~

.. autoapisummary::

   seisflows3.workflow.migration.PAR
   seisflows3.workflow.migration.PATH
   seisflows3.workflow.migration.system
   seisflows3.workflow.migration.solver
   seisflows3.workflow.migration.preprocess
   seisflows3.workflow.migration.postprocess


.. py:data:: PAR
   

   

.. py:data:: PATH
   

   

.. py:data:: system
   

   

.. py:data:: solver
   

   

.. py:data:: preprocess
   

   

.. py:data:: postprocess
   

   

.. py:class:: Migration

   Bases: :py:obj:`custom_import`\ (\ :py:obj:`'workflow'`\ , :py:obj:`'base'`\ )

   Migration base class.

   Performs the workflow of an inversion up to the postprocessing. In the
   terminology of seismic exploration, implements a 'reverse time migration'.

   .. py:attribute:: logger
      

      

   .. py:method:: required(self)
      :property:

      A hard definition of paths and parameters required by this class,
      alongside their necessity for the class and their string explanations.


   .. py:method:: main(self, return_flow=False)

      s
      Migrates seismic data to generate sensitivity kernels

      :type return_flow: bool
      :param return_flow: for CLI tool, simply returns the flow function
          rather than running the workflow. Used for print statements etc.


   .. py:method:: setup(self)

      Sets up the SeisFlows3 modules for the Migration


   .. py:method:: generate_synthetics(self)

      Performs forward simulation, and evaluates the objective function


   .. py:method:: backproject(self)

      Backproject or create kernels by running adjoint simulations


   .. py:method:: process_kernels(self)

      Backproject to create kernels from synthetics


   .. py:method:: finalize(self)

      Saves results from current model update iteration


   .. py:method:: save_kernels_sum(self)

      Same summed kernels into the output directory


   .. py:method:: save_kernels(self)

      Save individual kernels into the output directory


   .. py:method:: save_traces(self)

      Save waveform traces into the output directory




# //////////////////////////////////////////////////////////////////////////////
#
#                        SeisFlows YAML Parameter File
#
# //////////////////////////////////////////////////////////////////////////////
#
# Modules correspond to the structure of the source code, and determine
# SeisFlows' behavior at runtime. Each module requires its own sub-parameters.
#
# .. rubric::
#   - To determine available options for modules listed below, run:
#       > seisflows print modules
#   - To auto-fill with docstrings and default values (recommended), run:
#       > seisflows configure
#   - To set values as NoneType, use: null
#   - To set values as infinity, use: inf
#
#                                    MODULES
#                                    ///////
# WORKFLOW (str):    The method for running SeisFlows; equivalent to main()
# SOLVER (str):      External numerical solver to use for waveform simulations
# SYSTEM (str):      Computer architecture of the system being used
# OPTIMIZE (str):    Optimization algorithm for the inverse problem
# PREPROCESS (str):  Preprocessing schema for waveform data
# POSTPROCESS (str): Postprocessing schema for kernels and gradients
# ==============================================================================
WORKFLOW: inversion
SOLVER: specfem2d
SYSTEM: workstation
OPTIMIZE: gradient
PREPROCESS: default
POSTPROCESS: default

# =============================================================================
#                                    SYSTEM                                    
#                                    //////                                    
# TITLE (str):
#   The name used to submit jobs to the system, defaults to the name of the
#   working directory
# MPIEXEC (str):
#   Function used to invoke executables on the system. For example 'srun' on
#   SLURM systems, or './' on a workstation. If left blank, will guess based
#   on the system.
# NTASK (int):
#   Number of separate, individual tasks. Also equal to the number of desired
#   sources in workflow
# NPROC (int):
#   Number of processor to use for each simulation
# LOG_LEVEL (str):
#   Verbosity output of SF logger. Available from least to most verbosity:
#   'CRITICAL', 'WARNING', 'INFO', 'DEBUG'; defaults to 'DEBUG'
# VERBOSE (bool):
#   Level of verbosity provided to the output log. If True, log statements
#   will declare what module/class/function they are being called from.
#   Useful for debugging but also very noisy.
# =============================================================================
TITLE: test_data
MPIEXEC:
NTASK: 1
NPROC: 1
LOG_LEVEL: DEBUG
VERBOSE: False

# =============================================================================
#                                  PREPROCESS                                  
#                                  //////////                                  
# MISFIT (str):
#   Misfit function for waveform comparisons, for available see
#   seisflows.plugins.misfit
# BACKPROJECT (str):
#   Backprojection function for migration, for available see
#   seisflows.plugins.adjoint
# NORMALIZE (list):
#   Data normalization parameters used to normalize the amplitudes of
#   waveforms. Choose from two sets: ENORML1: normalize per event by L1 of
#   traces; OR ENORML2: normalize per event by L2 of traces; AND TNORML1:
#   normalize per trace by L1 of itself; OR TNORML2: normalize per trace by
#   L2 of itself
# FILTER (str):
#   Data filtering type, available options are:BANDPASS (req. MIN/MAX
#   PERIOD/FREQ);LOWPASS (req. MAX_FREQ or MIN_PERIOD); HIGHPASS (req.
#   MIN_FREQ or MAX_PERIOD)
# MIN_PERIOD (float):
#   Minimum filter period applied to time series.See also MIN_FREQ, MAX_FREQ,
#   if User defines FREQ parameters, they will overwrite PERIOD parameters.
# MAX_PERIOD (float):
#   Maximum filter period applied to time series.See also MIN_FREQ, MAX_FREQ,
#   if User defines FREQ parameters, they will overwrite PERIOD parameters.
# MIN_FREQ (float):
#   Maximum filter frequency applied to time series.See also MIN_PERIOD,
#   MAX_PERIOD, if User defines FREQ parameters, they will overwrite PERIOD
#   parameters.
# MAX_FREQ (float):
#   Maximum filter frequency applied to time series,See also MIN_PERIOD,
#   MAX_PERIOD, if User defines FREQ parameters, they will overwrite PERIOD
#   parameters.
# MUTE (list):
#   Data mute parameters used to zero out early / late arrivals or offsets.
#   Choose any number of: EARLY: mute early arrivals; LATE: mute late
#   arrivals; SHORT: mute short source-receiver distances; LONG: mute long
#   source-receiver distances
# =============================================================================
MISFIT: waveform
BACKPROJECT: null
NORMALIZE: []
FILTER: null
MIN_PERIOD:
MAX_PERIOD:
MIN_FREQ:
MAX_FREQ:
MUTE: []

# =============================================================================
#                                    SOLVER                                    
#                                    //////                                    
# MATERIALS (str):
#   Material parameters used to define model. Available: ['ELASTIC': Vp, Vs,
#   'ACOUSTIC': Vp, 'ISOTROPIC', 'ANISOTROPIC']
# DENSITY (str):
#   How to treat density during inversion. Available: ['CONSTANT': Do not
#   update density, 'VARIABLE': Update density]
# ATTENUATION (bool):
#   If True, turn on attenuation during forward simulations, otherwise set
#   attenuation off. Attenuation is always off for adjoint simulations.
# FORMAT (float):
#   Format of synthetic waveforms used during workflow, available options:
#   ['ASCII', 'SU']
# COMPONENTS (str):
#   Components used to generate data, formatted as a single string, e.g. ZNE
#   or NZ or E
# SOLVERIO (str):
#   The format external solver files. Available: ['fortran_binary']
# SOURCE_PREFIX (str):
#   Prefix of SOURCE files in path SPECFEM_DATA. By default, 'SOURCE' for
#   SPECFEM2D
# =============================================================================
MATERIALS: ELASTIC
DENSITY: CONSTANT
ATTENUATION: False
FORMAT: ASCII
COMPONENTS: ZNE
SOLVERIO: fortran_binary
SOURCE_PREFIX: SOURCE

# =============================================================================
#                                  POSTPROCESS                                 
#                                  ///////////                                 
# SMOOTH_H (float):
#   Gaussian half-width for horizontal smoothing in units of meters. If 0.,
#   no smoothing applied
# SMOOTH_V (float):
#   Gaussian half-width for vertical smoothing in units of meters
# TASKTIME_SMOOTH (int):
#   Large radii smoothing may take longer than normal tasks. Allocate
#   additional smoothing task time as a multiple of TASKTIME
# =============================================================================
SMOOTH_H: 0.0
SMOOTH_V: 0.0
TASKTIME_SMOOTH: 1

# =============================================================================
#                                   OPTIMIZE                                   
#                                   ////////                                   
# LINESEARCH (str):
#   Algorithm to use for line search, see seisflows.plugins.line_search for
#   available choices
# PRECOND (str):
#   Algorithm to use for preconditioning gradients, see
#   seisflows.plugins.preconds for available choices
# STEPCOUNTMAX (int):
#   Max number of trial steps in line search before a change in line search
#   behavior
# STEPLENINIT (float):
#   Initial line search step length, as a fraction of current model
#   parameters
# STEPLENMAX (float):
#   Max allowable step length, as a fraction of current model parameters
# =============================================================================
LINESEARCH: Bracket
PRECOND:
STEPCOUNTMAX: 10
STEPLENINIT: 0.05
STEPLENMAX: 0.5

# =============================================================================
#                                   WORKFLOW                                   
#                                   ////////                                   
# SAVETRACES (bool):
#   Save waveform traces to disk after they have been generated by the
#   external solver
# SAVERESIDUALS (bool):
#   Save data-synthetic residuals each time they are caluclated
# CASE (str):
#   How to address 'data' in your workflow, available options: 1) 'data':
#   Real data inversion. Observed waveforms must be provided by the user in
#   PATH.DATA/{SOURCE_NAME}. OR if PAR.PREPROCESS=='pyatoa' data should be
#   discoverable via IRIS webservices based on event ID and station codes2)
#   'synthetic': A synthetic-synthetic workflow. 'Data' will be generated as
#   synthetics using PATH.MODEL_TRUE.
# SAVEGRADIENT (bool):
#   Save gradient files each time the gradient is evaluated
# SAVEKERNELS (bool):
#   Save event kernel files each time they are evaluated
# SAVEAS (str):
#   Format to save models, gradients, kernels. Available: ['binary': save
#   files in native SPECFEM .bin format, 'vector': save files as NumPy .npy
#   files, 'both': save as both binary and vectors]
# BEGIN (int):
#   First iteration of an inversion workflow, 1 <= BEGIN <= inf
# END (int):
#   Last iteration of the inverison workflow,BEGIN <= END <= inf
# RESUME_FROM (str):
#   Name of flow task to resume workflow from. Useful for restarting failed
#   workflows or re-trying sections of workflows with new parameters. To
#   determine available options for your given workflow: > seisflows print
#   flow
# STOP_AFTER (str):
#   Name of flow task to stop workflow after. Useful for stopping mid-
#   workflow to look at results before proceeding (e.g., to look at waveform
#   misfits before evaluating the gradient). To determine available options
#   for your given workflow: > seisflows print flow
# SAVEMODEL (bool):
#   Save updated model files after each iteration
# =============================================================================
SAVETRACES: False
SAVERESIDUALS: False
CASE: data
SAVEGRADIENT: True
SAVEKERNELS: False
SAVEAS: binary
BEGIN: 1
END: 1
RESUME_FROM:
STOP_AFTER:
SAVEMODEL: True

# =============================================================================
#                                     PATHS                                    
#                                     /////                                    
# SCRATCH:
#   scratch path to hold temporary data during workflow
# OUTPUT:
#   directory to save workflow outputs to disk
# SYSTEM:
#   scratch path to hold any system related data
# LOGFILE:
#   the main output log file where all processes will track their status
# PREPROCESS:
#   scratch path to store any preprocessing outputs
# SOLVER:
#   scratch path to hold solver working directories
# DATA:
#   path to observed waveform data available to workflow
# SPECFEM_BIN:
#   path to the SPECFEM binary executables
# SPECFEM_DATA:
#   path to the SPECFEM DATA/ directory containing the 'Par_file', 'STATIONS'
#   file and 'CMTSOLUTION' files
# MASK:
#   Directory to mask files for gradient masking
# OPTIMIZE:
#   scratch path to store data related to nonlinear optimization library.
#   Data stored here include model, gradient, and search direction vectors
#   (numpy arrays), andadditional arrays related to specific optimization
#   algorithms
# MODEL_INIT:
#   Path location of the initial model to be used to generate the the first
#   evaluation of synthetic seismograms.
# GRAD:
#   scratch path to store any models or kernels related to gradient
#   evaluations. Sub-directories will be generated inside PATH.GRAD to save
#   various stages of gradient manipulation
# MODEL_TRUE:
#   Target model to be used for PAR.CASE == 'synthetic'. The TRUE model will
#   be used to evaluate forward simulations ONCE at the beginning of the
#   workflow, to generate 'data'.
# FUNC:
#   scratch path to store data related to misfit function evaluations that
#   take place during the line search. Data stored here include residuals
#   from data-synthetic misfit, and a given 'try' model being used to
#   generate synthetics.
# HESS:
#   scratch path to store data related to Hessian evaluations
# =============================================================================
PATHS:
    SCRATCH: scratch
    OUTPUT: output
    SYSTEM: scratch/system
    LOGFILE: sfoutput.txt
    PREPROCESS: scratch/preprocess
    SOLVER: scratch/solver
    DATA:
    SPECFEM_BIN: specfem/bin
    SPECFEM_DATA: specfem/DATA
    MASK:
    OPTIMIZE: scratch/optimize
    MODEL_INIT: specfem/MODEL_INIT
    GRAD: scratch/evalgrad
    MODEL_TRUE: specfem/MODEL_TRUE
    FUNC: scratch/evalfunc
    HESS: scratch/evalhess

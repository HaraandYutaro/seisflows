:py:mod:`seisflows3-super.system.maui`
======================================

.. py:module:: seisflows3-super.system.maui

.. autoapi-nested-parse::

   Maui is a New Zealand eScience Infrastructure (NeSI) high performance computer.
   Maui operates on a SLURM workload manager and therefore overloads the SLURM
   System module. Maui-specific parameters and functions are defined here.

   Information on Maui can be found here:
   https://support.nesi.org.nz/hc/en-gb/articles/360000163695-M%C4%81ui

   .. note::
       Python and conda capabilities are NOT accessible from Maui, these
       capabilities have been shifted onto a separate cluster: Maui ancil
       This subclass therefore moves all Python dependent capabilities
       (i.e., SeisFlows3, Pyatoa) onto the ancilary cluster.

       See also: https://support.nesi.org.nz/hc/en-gb/articles/                                          360000203776-M%C4%81ui-Ancillary-Nodes



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   seisflows3-super.system.maui.Maui




Attributes
~~~~~~~~~~

.. autoapisummary::

   seisflows3-super.system.maui.PAR
   seisflows3-super.system.maui.PATH


.. py:data:: PAR
   

   

.. py:data:: PATH
   

   

.. py:class:: Maui

   Bases: :py:obj:`custom_import`\ (\ :py:obj:`'system'`\ , :py:obj:`'slurm'`\ )

   System interface for Maui, which operates on a SLURM system

   .. py:attribute:: logger
      

      

   .. py:method:: required(self)
      :property:

      A hard definition of paths and parameters required by this class,
      alongside their necessity for the class and their string explanations.


   .. py:method:: check(self, validate=True)

      Checks parameters and paths


   .. py:method:: submit(self)

      Submits master job workflow to maui_ancil cluster as a single-core
      process

      .. note::
          The master job must be run on maui_ancil because Maui does
          not have the ability to run the command "sacct"

      .. note::
          We do not place SLURMARGS into the sbatch command to avoid the
          export=None which will not propagate the conda environment


   .. py:method:: run(self, classname, method, single=False, **kwargs)

      Runs task multiple times in embarrassingly parallel fasion on a SLURM
      cluster. Executes classname.method(*args, **kwargs) `NTASK` times,
      each time on `NPROC` CPU cores

      :type classname: str
      :param classname: the class to run
      :type method: str
      :param method: the method from the given `classname` to run
      :type scale_tasktime: int
      :param scale_tasktime: a way to get over the hard-set tasktime, because
          some tasks take longer (e.g. smoothing), but you don't want these
          to set the tasktimes for all other tasks. This lets you scale the
          time of specific tasks by PAR.TASKTIME * scale_tasktime


   .. py:method:: run_ancil(self, classname, method, **kwargs)

      Runs prepost jobs on Maui ancil, the ancilary cluster which contains
      the conda and Python capabilities for Maui.

      :type classname: str
      :param classname: the class to run
      :type method: str
      :param method: the method from the given `classname` to run




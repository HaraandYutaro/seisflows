#!/usr/bin/env python

import argparse
import sys 

from os import getcwd
from os.path import exists
from seisflows.tools import unix
from seisflows.config import config, tilde_expand, Dict
from seisflows.tools.tools import loadpy, loadyaml
        
           
def getargs():
    parser = argparse.ArgumentParser()

    parser.add_argument('--workdir', nargs='?',
        default=getcwd())

    parser.add_argument('--parameter_file', nargs='?',
        default='parameters.yaml')
        
    parser.add_argument('--path_file', nargs='?',
        default='paths.yaml')

    return parser.parse_args()
    
    
if __name__ == "__main__":
    args = getargs()
    
    # check input files
    if not exists(args.parameter_file) or not exists(args.path_file):
       # fall back to legacy filenames
        if exists('parameters.py') and exists('paths.py'):
            args.parameter_file = 'parameters.py'
            args.path_file = 'paths.py'
        elif exists('parameters.yaml'):
            args.parameter_file = 'parameters.yaml'
            args.path_file = 'paths.py'
        else:
            raise Exception('Input files not found.')

    # Dynamically assign load functions
    if '.py' in args.parameter_file:
        load = loadpy
    else:
        load = loadyaml

    # register parameters
    parameters = load(args.parameter_file)
    sys.modules['seisflows_parameters'] = Dict(parameters)

    # register paths
    if exists('paths.py'):
        paths = tilde_expand(loadpy(args.path_file))
    elif 'PATHS' in parameters:
        paths = tilde_expand(parameters['PATHS'])

    # check that paths exist
    paths_dont_exist = []
    for key, path in paths.items():
        if (key in ['SCRATCH', 'PYATOA_IO']) or (path == ''):
            continue
        if not exists(path):
            paths_dont_exist.append(path) 
    if paths_dont_exist:
        print 'The following paths do not exist:'
        for path_ in paths_dont_exist:
            print '\t{}'.format(path_)
        sys.exit()
        
    sys.modules['seisflows_paths'] = Dict(paths)

    unix.mkdir(args.workdir)
    unix.cd(args.workdir)

    config()

    # submit workflow
    workflow = sys.modules['seisflows_workflow']
    system = sys.modules['seisflows_system']
    system.submit(workflow)


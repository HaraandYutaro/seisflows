#!/usr/bin/env python
"""
This script opens the current Seisflows workflow in an
iPython debugger environment. This allows the User to look at workflow
parameters, execute individual functions, etc.

Paths and parameters should be specified in the file `parameters.yaml`
"""
import os
import sys
import argparse
import numpy as np

from seisflows.config import config, names, tilde_expand, Dict
from seisflows.tools import unix, tools
from seisflows.tools.tools import loadyaml


def convert_model(path_output, model_fid):
    """
    convert model .npy to .bin files

    :type path_output: str
    :param path_output: path to the 'output' directory where models are saved
    :type model_fid: str
    :param model_fid: the model that should be converted
    """
    src = os.path.join(path_output, f"{model_fid}.npy")
    dst = os.path.join(path_output, model_fid)
    
    if not os.path.exists(src):
        print(f"{src} does not exist")
        return
    elif os.path.exists(dst):
        print(f"{src} already exists")
        return
    
    solver.save(solver.split(np.load(src)), dst) 
    

def getargs():
    """
    Get User defined arguments, or assign defaults

    :rtype: argparse.ArgumentParser()
    :return: User defined or default arguments
    """
    parser = argparse.ArgumentParser()

    parser.add_argument('--workdir', nargs='?', default=os.getcwd())

    parser.add_argument('--parameter_file', nargs='?',
                        default='parameters.yaml')

    return parser.parse_args()


if __name__ == "__main__":
    args = getargs()

    # Check if the filepaths exist
    if not os.path.exists(args.parameter_file):
        raise Exception(f"Parameter file not found: {args.parameter_file}")
 
    # Register parameters
    parameters = loadyaml(args.parameter_file)
    sys.modules['seisflows_parameters'] = Dict(parameters)

    # Register paths, they should have been checked by sfsubmit
    paths = tilde_expand(parameters['PATHS'])
    sys.modules['seisflows_paths'] = Dict(paths)

    # Create the necessary paths
    unix.mkdir(args.workdir)
    unix.cd(args.workdir)

    # Reload objects from Pickle files
    for name in names:
        fullfile = os.path.join(
            args.workdir, "output", "seisflows_" + name + ".p")
        sys.modules['seisflows_' + name] = tools.loadobj(fullfile)

    # Check parameters
    for name in names:
        sys.modules['seisflows_' + name].check()

    # Prematurely distribute modules for easier debugging
    PATH = sys.modules['seisflows_paths']
    PAR = sys.modules['seisflows_parameters']

    workflow = sys.modules['seisflows_workflow']
    system = sys.modules['seisflows_system']
    solver = sys.modules['seisflows_solver']
    optimize = sys.modules['seisflows_optimize']
    
    import ipdb; ipdb.set_trace()

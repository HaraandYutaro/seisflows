Overview
=================
``SeisFlows`` is a Python-based package for automating waveform inversion.
It is used in industry and academic applications for deriving improved
Earth models from local to global scales, in 2D and 3D.

Seismic imaging techniques, which commonly include full waveform inversion
and adjoint tomography, take advantage of seismic signals generated by
active and passive seismic sources to provide constraints on Earth structure,
typically defined in terms of seismic velocities, density, and anisotropy.

.. 
    **!!! WAVEFORM COMPARISON PICTURE !!!**

Seismic inversions typically involve large scale models (millions to billions
of individual model parameters) and large waveform datasets
(thousands of measurements from tens to hundreds of sources and receivers),
requiring very-similar processing and analysis.

SeisFlows is an **automation** and **parallelization** package, meant to
reduce the "human-time" cost of performing a seismic inversion.

-------------------------

How does it work?
-----------------
SeisFlows was developed as a modular tool. By "hiding" case-by-base details
behind a generalized namespace, a SeisFlows workflow can remain consistent
whether applied to a 2D acoustic problem on a Linux workstation, or to a
continental-scale adjoint tomography problem run on a high performance computer.


SeisFlows Modules:
    * **Workflow**: The equivalent of main(); controls the collection and order
      of steps taken (Examples: Inversion, Migration)
    * **System**: Compute system interface used to run SeisFlows. A consistent
      internal structure makes it relatively seamless to switch between
      workstation problems, and HPC jobs (Examples: workstation, Slurm)
    * **Solver**: External numerical solver used to generate models, synthetics,
      and kernels (Examples: SPECFEM2D, SPECFEM3D Cartesian, SPECFEM3D Globe), and
      to smooth and manipulate kernels and gradients.
    * **Preprocessing**: Signal processing operations performed on time series,
      including downsampling, detrending, filtering, etc.
    * **Optimization**: Nonlinear optimization algorithms used to find
      the minimum of a waveform-based objective function (Examples: L-BFGS,
      NLCG, steepest descent)

``SeisFlows`` is built upon the object-oriented programming concept of
`inheritance <https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)>`__.
This means that if desired functionality is missing in the main package, users
can overload default classes without having to rewrite entire portions of the
code base. This allows SeisFlows to maintain a rigid structure while still being
incredibly flexible in its application to various scales and problems.


What does SeisFlows NOT do?
------------------------------
``SeisFlows`` is **not** a numerical solver, **not** a waveform processing tool,
and **not** a visualization tool. SeisFlows is a workflow management and
optimization tool,
Knowledge of interfacing with external numerical solvers, as well as waveform
preprocessing tools, is paramount to successful application of SeisFlows.


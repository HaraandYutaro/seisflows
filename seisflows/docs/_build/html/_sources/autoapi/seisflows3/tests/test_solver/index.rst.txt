:py:mod:`seisflows3.tests.test_solver`
======================================

.. py:module:: seisflows3.tests.test_solver

.. autoapi-nested-parse::

   Test suite for the SeisFlows3 system module, which controls interaction with
   various compute systems



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   seisflows3.tests.test_solver.copy_par_file
   seisflows3.tests.test_solver.modules
   seisflows3.tests.test_solver.sfinit
   seisflows3.tests.test_solver.test_import
   seisflows3.tests.test_solver.test_validate
   seisflows3.tests.test_solver.test_required_parameters_exist
   seisflows3.tests.test_solver.test_required_functions_exist



Attributes
~~~~~~~~~~

.. autoapisummary::

   seisflows3.tests.test_solver.MODULE
   seisflows3.tests.test_solver.REQUIRED_PARAMETERS
   seisflows3.tests.test_solver.REQUIRED_FUNCTIONS
   seisflows3.tests.test_solver.TEST_DIR
   seisflows3.tests.test_solver.REPO_DIR


.. py:data:: MODULE
   :annotation: = solver

   

.. py:data:: REQUIRED_PARAMETERS
   :annotation: = ['MATERIALS', 'DENSITY', 'ATTENUATION']

   

.. py:data:: REQUIRED_FUNCTIONS
   :annotation: = []

   

.. py:data:: TEST_DIR
   

   

.. py:data:: REPO_DIR
   

   

.. py:function:: copy_par_file(tmpdir)

   Copy the template parameter file into the temporary test directory
   :rtype: str
   :return: location of the parameter file


.. py:function:: modules()

   Return a list of subclasses that falls under the System module


.. py:function:: sfinit(tmpdir, copy_par_file)

   Re-used function that will initate a SeisFlows3 working environment in
   sys modules
   :return:


.. py:function:: test_import(sfinit, modules)

   Test code by importing all available classes for this module.
   If any of these fails then the module itself has some code error
   (e.g., syntax errors, inheritance errors).


.. py:function:: test_validate(sfinit, modules)

   Test out path and parameter validation, essentially checking that all
   the paths and parameters are set properly

   .. note::
       This doesn't work because we have required parameters that are not
       set in the default parameter file. We can run configure beforehand
       but does that make sense?
   :return:


.. py:function:: test_required_parameters_exist(sfinit, modules)

   Ensure that the required parameters are set in all the classes/subclasses
   That is, that the parameters defined above in REQUIRED_PARAMETERS have been
   defined by each SYSTEM class


.. py:function:: test_required_functions_exist(sfinit, modules)

   Make sure that the named, required functions exist within the class
   Do not execute just make sure they're defined, because they will be
   expected by other modules



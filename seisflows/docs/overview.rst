Overview
=================
SeisFlows is a Python-based package for automating waveform inversion.
It is used in industry and academic applications for deriving improved
Earth models from local to global scales, in 2D and 3D.

Seismic imaging techniques, which commonly include full waveform inversion
and adjoint tomography, take advantage of seismic signals generated by
active and passive seismic sources to provide constraints on Earth structure,
typically defined in terms of seismic velocities, density, and anisotropy.


Seismic inversions typically involve large scale models (millions to billions
of individual model parameters), large datasets (thousands of measurements from
tens to hundreds of sources and receivers), all of which require similar
processing and analysis. Automation and parallelization therefore greatly reduce
the computational and manual overhead cost of performing a seismic inversion.

SeisFlows was consequently developed to provide a flexible, modular interface to
facilitate implementation of seismic inversion workflows.

How does it work?
-----------------
SeisFlows was developed as a modular tool. Users are offered customizable
choices in each of the following categories related to an imaging workflow:

    * **Workflow**: The equivalent of main(); controls the collection and order of
      steps taken.
    * **System**: Compute system interface used to run SeisFlows. An abstract
      base class provides consistent internal structure to interact with various
      job handling systems like SLURM and PBS, making it relatively
      easy to switch a workflow between different systems.
    * **Solver**: External numerical solvers are used to generate models,
      and perform numerical simulations of waveform propogation. Currently
      SeisFlows is capable of interfacing with SPECFEM2D, SPECFEM3D Cartesian,
      and SPECFEM3D Globe.
    * **Preprocessing**: Preprocessing consists of signal processing operations
      performed on seismic traces prior to a gradient calculation. SeisFlows
      contains simple preprocessing capabilities but allows for interaction with
      more specialized waveform processing tools like ObsPy or Pyatoa.
    * **Postprocessing**: Postprocessing involves regularization or image
      processing operations carried out after gradient computations. Typical
      tasks involve smoothing, preconditioning or masking. Some of these tasks
      are performed in SeisFlows, while others are outsourced to the external
      numerical solver.
    * **Nonlinear Optimization**: Efficient nonlinear optimization allows for
      rapid iterative convergence of a misfit function, meaning the quickest
      resolution of structural features using full waveform inversion with the
      least amount of computational expense. SeisFlows provides templates for
      nonlinear conjugate gradient methods (e.g. gradient descent) and
      quasi-newton optimization schemes (e.g. L-BFGS).

SeisFlows is built upon the idea of inheritance in object-oriented-programming.
This means that if desired functionality is missing in the main package, users
can overload default classes without having to rewrite entire portions of the
code base. This allows SeisFlows to maintain a rigid structure while still being
incredibly flexible in its application to various scales and problems.

What does SeisFlows NOT do?
---------------------------
SeisFlows itself is not a numerical solver, nor is it a waveform processing or
visualization tool. SeisFlows is a workflow management and optimization tool,
and calls upon external tools to get other jobs done. Knowledge of interfacing
with external numerical solvers, as well as waveform preprocessing tools, is
paramount to successful application of SeisFlows.


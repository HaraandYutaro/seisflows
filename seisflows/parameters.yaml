# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
# Seisflows YAML Parameter File and Path Input
#
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
# Modules:
# These modules correspond to the structure of the source code, determining
# which modules are loaded at runtime. Each of these modules may also 
# correspond to a sub-set of parameters below, which in turn may have custom
# parameters that relate to overwritten/super'd modules
#
# ==============================================================================
WORKFLOW: thrifty_inversion_nz     # inversion, migration, modeling, etc.
SOLVER: specfem3d_nz               # specfem2d, specfem3d
SYSTEM: maui_lg                    # serial, pbs, slurm
OPTIMIZE: LBFGS                    # steepest_descent, LBFGS, NLCG
LINESEARCH: Backtrack              # Bracket, Backtrack
PREPROCESS: pyatoa                 # base, Pyatoa
POSTPROCESS: base                  # base


# ==============================================================================
#
# Workflow
#
# ==============================================================================
BEGIN: 1                # first iteration
END: 1                  # last iteration
NSRC: 2                 # number of sources

# ==============================================================================
#
# System
#
# ==============================================================================
NTASK: NSRC             # number of tasks
NPROC: 80               # number of processers
NODESIZE: 40            # number of cores per node (set by system)
WALLTIME: 180           # master job walltime
TASKTIME: 25            # maximum job time for each slave job 

#-------------------------
# Custom System: 'maui_lg'
#-------------------------
ACCOUNT: nesi00263                  # NeSI account name 
MAIN_CLUSTER: maui                  # cluster to run simulations on
MAIN_PARTITION: nesi_research       # partition of simulation cluster
ANCIL_CLUSTER: maui_ancil           # cluster to run data processing on
ANCIL_PARTITION: nesi_prepost       # partition of processing cluster
ANCIL_TASKTIME: 20                  # for shorter tasktimes (default=TASKTIME)
NODES: 2                            # number of nodes to occupy on cluster
CPUS_PER_TASK: 1                    # available for multithreading (default=1)
SLURMARGS: '--hint=nomultithread'   # request the entire node, requires 4 NODE
WITH_OPENMP: False                  # use openMP for job submission

# ==============================================================================
#
# Solver
#
# ==============================================================================
CASE: Synthetic             # 'Synthetic' for syn-syn; 'Data' for syn-data
MATERIALS: Elastic          # 'Elastic': Vp and Vs; 'Acoustic': Vp only
DENSITY: Constant           # 'Variable': to update density; 'Constant' to not
PRECOND: None               # Optimization preconditioners 
NT: 10000                   # number of time steps
DT: 0.03                    # time step
F0: .1                      # dominant frequency (SPECFEM2D only)
SOLVERIO: fortran_binary    # the file type used in the solver

# ==============================================================================
#
# Preprocessing
#
# ==============================================================================
FORMAT: ascii           # data file format

#-----------------------------
# Custom Preprocessing: 'base'
#-----------------------------
CHANNELS: z              # data channels to be used
NORMALIZE: 0             # normalize tracesi
FILTER: ''               # highpass, lowpass, bandpass
MUTE: 0                  # mute direct arrival
MUTECONST: 0.            # mute constant (for muting early arrivals)
MUTESLOPE: 0.            # mute slope (for muting early arrivals)

#----------------------------------------------------------------
# Custom Preprocessing: 'pyatoa'
# This takes the place of a sfconfig.yaml file from Pyatoa
#----------------------------------------------------------------
PYATOA:
    SET_LOGGING: info       # Detailed workflow info: [info, debug, null]
    CFGPATHS:               # User defined paths to auxiliary data
        waveforms: []
        synthetics: []
        responses: []   
   
    # OBSPY 
    UNIT_OUTPUT: DISP       # Observed waveform units; [disp, vel, acc]
    SYNTHETIC_UNIT: DISP    # Specfem3D synthetic units; [disp, vel, acc]
    MIN_PERIOD: 10.         # minimum period to filter all data in seconds
    MAX_PERIOD: 30.         # maximum period
    FILTER_CORNERS: 4       # corners for bandpass filter, default=4
    ROTATE_TO_RTZ: False    # rotate waveforms to radial, transverse, vertical
    CLIENT: GEONET          # FDSN client for external data fetching
    ZERO_PAD: 0             # zero pad front and back of data in seconds
    START_PAD: 20           # time before origintime to retrieve data
    END_PAD: 500            # time after origintime to retrieve data

    # PYFLEX, PYADJOINT
    PYFLEX_MAP: hikurangi          # config map for Pyflex; see pyatoa.plugins
    ADJ_SRC_TYPE: cc_hikurangi     # misfit function to use in Pyadjoint
    WINDOW_AMP_RATIO: 0.2          # extra amplitude threshold criteria; [0:1]
    FIX_WINDOWS: False             # fix misfit windows between iterations

    # OUTPUT FILES
    SNAPSHOT: True             # periodically copy .h5 files incase corruption
    WRITE_MISFIT_JSON: True    # save misfit information into a .json file 
    CREATE_SRCRCV_VTK: True    # generate .vtk files for srcrcv locations

    # PLOTTING
    MAP_CORNERS: null          # to set the extent of the map for srcrcv maps
    PLOT_WAVEFORMS: True       # plot waveform figures during workflow
    PLOT_SRCRCV_MAPS: True     # plot source receiver maps during workflow
    PLOT_MISFIT_MAPS: False    # plot misfit maps during workflow
    COMBINE_IMGS: True         # combine waveforms and srcrcv maps into a .pdf
    PURGE_WAVEFORMS: True      # if COMBINE_IMGS; delete waveforms after combine
    PURGE_TILES: True          # if COMBINE_IMGS; delete intermediate imgs

# ==============================================================================
#
# Postprocessing
#
# ==============================================================================
TASKTIME_SMOOTH: 3     # scales SYSTEM.TASKTIME for longer smoothing, default=1
SMOOTH_H: 20000.        # smoothing Gaussian std. in horizontal, meters
SMOOTH_V: 2000.         # smoothing Gaussian std. in vertical, meters
SCALE: 1.               # scaling factor

# ==============================================================================
#
# Optimization
#
# ==============================================================================
STEPCOUNTMAX: 7         # max allowable trial step lengths (default=10, min=3)
STEPLENINIT: 0.05       # initial step, fraction of current model (default=0.05)
STEPLENMAX: 0.5         # max step, fraction of current model (default=0.5)

#-------------------------
# Custom Optimization: LBFGS
#-------------------------
LBFGS:
    LBFGSMAX: None           # periodic restart invterval (default=infinity)
    LBFGSMEM: None           # LBFGS memory, used for restarts (default=3)
    LBFGSTHRES: None         # descent direction threshold (default=0.0)

# ==============================================================================
#
# Saving workflow outputs
#
# ==============================================================================
SAVEGRADIENT: False
SAVEKERNELS: False
SAVEMODEL: True
SAVE_AS: vector      # save as "vector" (.npy) or "binary" (.bin) or "both"
SAVERESIDUALS: False
SAVETRACES: False
CREATE_EVENT_KERNEL_VTK: 
    - vp_kernel
    - vs_kernel
CREATE_SUM_NOSMOOTH_KERNEL_VTK: 
    - vp_kernel
    - vs_kernel
CREATE_GRADIENT_KERNEL_VTK: 
    - vp_kernel
    - vs_kernel

# ==============================================================================
#
# Paths
#
# ==============================================================================
SCRATCH: ''
MODEL_INIT: ''
MODEL_TRUE: ''  # only necessary if CASE == 'Synthetic'
SPECFEM_DATA: ''
SPECFEM_BIN: ''

#----------------------------------------------
# Pathing required if preprocessing == 'pyatoa'
#----------------------------------------------
PYTHON3: ''
PYATOA_IO: ''
PYATOA_RUN: ''

# ==============================================================================
#
# Advanced
#
# ==============================================================================
ENVIRONS: ''

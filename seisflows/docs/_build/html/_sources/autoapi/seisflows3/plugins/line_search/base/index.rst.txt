:py:mod:`seisflows3.plugins.line_search.base`
=============================================

.. py:module:: seisflows3.plugins.line_search.base

.. autoapi-nested-parse::

   This is the Base class for seisflows.plugins.line_search

   Line search is called on by the optimization procedure and should not really
   have any agency (i.e. it should not be able to iterate its own step count etc.,
   this should be completely left to the optimization algorithm to keep everything
   in one place)



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   seisflows3.plugins.line_search.base.Base




.. py:class:: Base(step_count_max, step_len_max, log_file)

   Abstract base class for line search

   Variables Descriptions:
       x: list of step lenths from current line search
       f: correpsonding list of function values
       m: number of step lengths in current line search
       n: number of model updates in optimization problem
       gtg: dot product of gradient with itself
       gtp: dot product of gradient and search direction

   Status codes
       status > 0  : finished
       status == 0 : not finished
       status < 0  : failed

   .. py:attribute:: logger
      

      

   .. py:method:: initialize(self, iter, step_len, func_val, gtg, gtp)

      Initialize a new search from step count 0 and calculate the step
      direction and length

      :type iter: int
      :param iter: current iteration defined by OPTIMIZE.iter
      :type step_len: float
      :param step_len: initial step length determined by optimization
      :type func_val: float
      :param func_val: current evaluation of the objective function
      :type gtg: float
      :param gtg: dot product of the gradient with itself
      :type gtp: float
      :param gtp: dot product of gradient `g` with search direction `p`
      :rtype alpha: float
      :return alpha: the calculated trial step length
      :rtype status: int
      :return status: current status of the line search


   .. py:method:: update(self, iter, step_len, func_val)

      Update search history by appending internal attributes, writing the
      current list of step lengths and function evaluations, and calculating a
      new step length

      :type iter: int
      :param iter: current iteration defined by OPTIMIZE.iter
      :type step_len: float
      :param step_len: step length determined by optimization
      :type func_val: float
      :param func_val: current evaluation of the objective function
      :rtype alpha: float
      :return alpha: the calculated rial step length
      :rtype status: int
      :return status: current status of the line search


   .. py:method:: clear_history(self)

      Clears internal line search history


   .. py:method:: reset(self)

      If a line search fails mid-search, and the User wants to resume from 
      the line search function. Initialize will be called again. This function
      undos the progress made by the previous line search so that a new line
      search can be called without problem.

      output.optim needs to have its lines cleared manually


   .. py:method:: write_log(self, iter=None, step_len=None, func_val=None)

      Write the line search history into a formatted text file (self.log)
      that looks something like this:

          ITER     STEPLEN     MISFIT
      ========  ========== ==========
            1            0          1

      :type iter: int
      :param iter: the current iteration defined by OPTIMIZATION.iter.
      :type step_len: float
      :param step_len: Current step length of the line search, also known
          as 'alpha' in the optimization algorithm
      :type func_val: float
      :param func_val: the function evaluation, i.e., the misfit, associated
          with the given step length (alpha)


   .. py:method:: search_history(self, sort=True)

      A convenience function, collects information based on the current
      evaluation of the line search, needed to determine search status and 
      calculate step length. From the full collection of the search history,
      only returns values relevant to the current line search.

      :type sort: bool
      :param sort: sort the search history by step length
      :rtype x: np.array
      :return x: list of step lenths from current line search
      :rtype f: np.array
      :return f: correpsonding list of function values
      :rtype gtg: list
      :return gtg: dot product dot product of gradient with itself
      :rtype gtp: list
      :return gtp: dot product of gradient and search direction
      :rtype i: int
      :return i: step_count
      :rtype j: int
      :return j: number of iterations corresponding to 0 step length


   .. py:method:: calculate_step(self)
      :abstractmethod:

      Determines step length and search status

      !!! Must be implemented by subclass !!!




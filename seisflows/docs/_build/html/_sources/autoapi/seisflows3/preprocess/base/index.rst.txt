:py:mod:`seisflows3.preprocess.base`
====================================

.. py:module:: seisflows3.preprocess.base

.. autoapi-nested-parse::

   The SeisFlows3 Preprocessing module is in charge of interacting with seismic
   data (observed and synthetic). It should contain functionality to read and write
   seismic data, apply preprocessing such as filtering, quantify misfit,
   and write adjoint sources that are expected by the solver.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   seisflows3.preprocess.base.Base




Attributes
~~~~~~~~~~

.. autoapisummary::

   seisflows3.preprocess.base.PAR
   seisflows3.preprocess.base.PATH


.. py:data:: PAR
   

   

.. py:data:: PATH
   

   

.. py:class:: Base

   Default SeisFlows preprocessing class

   Provides data processing functions for seismic traces, with options for
   data misfit, filtering, normalization and muting

   .. py:attribute:: logger
      

      

   .. py:method:: required(self)
      :property:

      A hard definition of paths and parameters required by this class,
      alongside their necessity for the class and their string explanations.


   .. py:method:: check(self, validate=True)

      Checks parameters and paths


   .. py:method:: setup(self)

      Sets up data preprocessing machinery by dynamicalyl loading the
      misfit, adjoint source type, and specifying the expected file type
      for input and output seismic data.


   .. py:method:: prepare_eval_grad(self, cwd, taskid, filenames, **kwargs)

      Prepares solver for gradient evaluation by writing residuals and
      adjoint traces. Meant to be called by solver.eval_func().

      Reads in observed and synthetic waveforms, applies optional
      preprocessing, assesses misfit, and writes out adjoint sources and
      STATIONS_ADJOINT file.

      .. note::
          Meant to be called by solver.eval_func(), may have unused arguments
          to keep functions general across subclasses.

      :type cwd: str
      :param cwd: current specfem working directory containing observed and
          synthetic seismic data to be read and processed. Should be defined
          by solver.cwd
      :type filenames: list of str
      :param filenames: list of filenames defining the files in traces


   .. py:method:: sum_residuals(self, files)

      Sums squares of residuals

      :type files: str
      :param files: list of single-column text files containing residuals
      :rtype: float
      :return: sum of squares of residuals


   .. py:method:: finalize(self)

      Any finalization processes that need to take place at the end of an
      iteration


   .. py:method:: _write_residuals(self, path, syn, obs)

      Computes residuals between observed and synthetic seismogram based on
      the misfit function PAR.MISFIT. Saves the residuals for each
      data-synthetic pair into a text file located at:

      ./scratch/solver/*/residuals

      The resulting file will be a single-column ASCII file that needs to be
      summed before use by the solver

      :type path: str
      :param path: location "adjoint traces" will be written
      :type syn: obspy.core.stream.Stream
      :param syn: synthetic data
      :type obs: obspy.core.stream.Stream
      :param syn: observed data


   .. py:method:: _write_adjoint_traces(self, path, syn, obs, filename)

      Writes "adjoint traces" required for gradient computation

      :type path: str
      :param path: location "adjoint traces" will be written
      :type syn: obspy.core.stream.Stream
      :param syn: synthetic data
      :type obs: obspy.core.stream.Stream
      :param syn: observed data
      :type filename: str
      :param filename: filename to write adjoint traces to


   .. py:method:: _apply_filter(self, st)

      Apply a filter to waveform data using ObsPy

      :type st: obspy.core.stream.Stream
      :param st: stream to be filtered
      :rtype: obspy.core.stream.Stream
      :return: filtered traces


   .. py:method:: _apply_mute(self, st)

      Apply mute on data based on early or late arrivals, and short or long
      source receiver distances

      .. note::
          The underlying mute functions have been refactored but not tested
          as I was not aware of the intended functionality. Not gauranteed
          to work, use at your own risk.

      :type st: obspy.core.stream.Stream
      :param st: stream to mute
      :rtype: obspy.core.stream.Stream
      :return: muted stream object


   .. py:method:: _apply_normalize(self, st)

      Normalize the amplitudes of waveforms based on user choice

      .. note::
          The normalization function has been refactored but not tested
          as I was not aware of the intended functionality. Not gauranteed
          to work, use at your own risk.

      :type st: obspy.core.stream.Stream
      :param st: All of the data streams to be normalized
      :rtype: obspy.core.stream.Stream
      :return: stream with normalized traces



